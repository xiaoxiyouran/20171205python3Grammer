#!/usr/bin/env python3
# -*- coding: utf-8 -*-

###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO: 把函数作为结果值返回

# 可变参数求和
def calc_sum(*args):
    ax = 0
    for n in args:
        ax = ax + n
    return ax

# 根据需要再求和
def lazy_sum(*args):
    def sum():
        ax = 0
        for n in args:
            ax = ax + n
        return ax

    return sum


f = lazy_sum(1, 3, 5, 7, 9)
print( f ) # <function lazy_sum.<locals>.sum at 0x10e784bf8> 返回的是求和函数

# 调用f时才算真正的计算结果
print( f() ) # 25

# 当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。

# 调用lazy_sum()时，每次调用都会返回一个新的函数，即使传入相同的参数
f1 = lazy_sum(1, 3, 5, 7, 9)
f2 = lazy_sum(1, 3, 5, 7, 9)
print( f1 == f2 ) # False

###=================================================================================================================
###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO:
# 每次循环，都创建了一个新的函数，然后，把创建的3个函数都返回了。
def count():
    fs = []
    for i in range(1, 4):
        def f():
             return i*i
        fs.append(f)
    return fs

f1, f2, f3 = count()

print( f1(),f2(),f3() ) # 9 9 9
# 全部都是9！原因就在于返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量i已经变成了3，因此最终结果为9。
# 返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。
# 一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变
def count():
    def f(j):
        def g():
            return j*j
        return g
    fs = []
    for i in range(1, 4):
        fs.append(f(i)) # f(i)立刻被执行，因此i的当前值被传入f()
    return fs

#
f1, f2, f3 = count()

print(f1(), f2(), f3())  # 1 4 9



###=================================================================================================================
###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO: 练习
# 利用闭包返回一个计数器函数，每次调用它返回递增整数：

def createCounter():
    n = 0

    def counter():
        nonlocal n  # 可以修改外部的变量，否则对于外部变量只有只读属性
        n += 1
        return n

    return counter

#
# 测试:
counterA = createCounter()
print(counterA(), counterA(), counterA(), counterA(), counterA())  # 1 2 3 4 5
counterB = createCounter()
if [counterB(), counterB(), counterB(), counterB()] == [1, 2, 3, 4]:
    print('测试通过!')
else:
    print('测试失败!')

###=================================================================================================================