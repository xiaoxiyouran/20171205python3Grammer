#!/usr/bin/env python3
# -*- coding: utf-8 -*-
###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO: map
# 将函数作用于列表的每一个元素

def f(x):
    return x * x

r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])
print( list(r) ) # [1, 4, 9, 16, 25, 36, 49, 64, 81] # 结果r是一个Iterator，Iterator是惰性序列，因此通过list()函数让它把整个序列都计算出来并返回一个list。

# 用循环也能实现
L = []
for n in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
    L.append(f(n))
print(L)

# map()作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的f(x)=x2，还可以计算任意复杂的函数，比如，把这个list所有数字转为字符串：
str_list = list(map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9]))
print( str_list ) # ['1', '2', '3', '4', '5', '6', '7', '8', '9']
###=================================================================================================================

###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO: reduce
# reduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：
# reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)
# 对一个序列求和

from functools import reduce
def add(x,y):
    return x+y

# 可用sum 函数
res = reduce(add,[1,3,5,7,9])

# 如果要把序列[1, 3, 5, 7, 9]变换成整数13579，reduce就可以派上用场：
def fn(x, y):
    return x * 10 + y

res = reduce(fn, [1, 3, 5, 7, 9]) # 13579


# 配合ruduce，将字符串转成数字
def char2num(s):
    digits = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}
    return digits[s]

print( reduce(fn, map(char2num, '13579')) )

# 整理成一个str2int的函数就是
DIGITS = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}

# 可在函数内定义函数
def str2int(s):
    def fn(x, y):
        return x * 10 + y
    def char2num(s):
        return DIGITS[s]
    return reduce(fn, map(char2num, s))

# 使用lamda 函数进一步转化
def char2num(s):
    return DIGITS[s]

def str2int(s):
    return reduce(lambda x, y: x * 10 + y, map(char2num, s))

# 假设Python没有提供int()函数，你完全可以自己写一个把字符串转化为整数的函数，而且只需要几行代码！
###=================================================================================================================

###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO: 练习
# 利用map()函数，把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字。输入：['adam', 'LISA', 'barT']，输出：['Adam', 'Lisa', 'Bart']：
def normalize(str):
    return str[0].upper() + str[1:].lower()

# 测试:
L1 = ['adam', 'LISA', 'barT']
L2 = list(map(normalize, L1))
print(L2)

###=================================================================================================================

###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO:练习
# Python提供的sum()函数可以接受一个list并求和，请编写一个prod()函数，可以接受一个list并利用reduce()求积：
def prod(L):
    def pro_two(x,y):
        return x*y
    return reduce(pro_two,L)

# 使用lambda 函数解决：
def prod_lambda(L):
    return reduce(lambda x,y:x*y,L)

# 测试
prod = prod_lambda;
print('3 * 5 * 7 * 9 =', prod([3, 5, 7, 9]))
if prod([3, 5, 7, 9]) == 945:
    print('测试成功!')
else:
    print('测试失败!')


###=================================================================================================================
###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO: 练习
# 利用map和reduce编写一个str2float函数，把字符串'123.456'转换成浮点数123.456：
def str2float(s):
    i = len(s) - s.find('.') - 1

    def char2num(ch):
        return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '.':'.'}[ch]
    def reduce_f(x,y):
        if y == '.':
            return x
        else:
            return 10 * x + y

    return reduce(reduce_f,map(char2num,s)) * 0.1 **i

# 测试
print('str2float(\'123.456\') =', str2float('123.456'))
if abs(str2float('123.456') - 123.456) < 0.00001:
    print('测试成功!')
else:
    print('测试失败!')

###=================================================================================================================

###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO:

###=================================================================================================================
