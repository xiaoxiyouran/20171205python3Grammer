#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import functools
###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO: 偏函数,方便大量带默认参数的转换
print( int('12345', base=8) ) # 进制转换

def int2(x, base=2):
    return int(x, base)

print(int2('1000000')) # 按2指定基转成10进制

###=================================================================================================================

###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO: functools.partial() 为函数创建一个偏函数
int2 = functools.partial(int, base=2)
print(int2('1000000')) # 按2指定基转成10进制

# functools.partial的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。

###=================================================================================================================

###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO: 创建偏函数时，实际上可以接收函数对象、*args和**kw这3个参数，当传入：
int2 = functools.partial(int, base=2) # 固定了int()函数的关键字参数base

int2('10010')
# 相当于
kw = { 'base': 2 }
int('10010', **kw)


max2 = functools.partial(max, 10)
# 会把10作为*args的一部分自动加到左边

max2(5, 6, 7) # 相当于
args = (10, 5, 6, 7)
max(*args) # 10

# 当函数的参数个数太多，需要简化时，使用functools.partial可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。

###=================================================================================================================



