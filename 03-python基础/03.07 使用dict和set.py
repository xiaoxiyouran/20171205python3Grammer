#!/usr/bin/env python3
# -*- coding: utf-8 -*-

###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO: key : value

d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
d_Michael = d['Michael']  # 字典查找很快,使用的是哈希

# 向字典添加键值对
d['Adam'] = 67 # {'Michael': 95, 'Bob': 75, 'Tracy': 85, 'Adam': 67}

# 由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：
d['Jack'] = 90
d['Jack'] = 88

# 如果key不存在，dict就会报错：
# d['Thomas']

# 避免key不存在的错误，有两种办法，一是通过in判断key是否存在：
if 'Thomas' in d :
    print( d['Thomas'] )

# 二是通过dict提供的get()方法，如果key不存在，可以返回None，或者自己指定的value：
d_Thomas = d.get('Thomas')  # None,返回None的时候Python的交互环境不显示结果。
d_Thomas = d.get('Thomas', -1) # -1

# 要删除一个key，用pop(key)方法，对应的value也会从dict中删除：
d.pop('Bob')    # {'Michael': 95, 'Tracy': 85, 'Adam': 67, 'Jack': 88}

# dict内部存放的顺序和key放入的顺序是没有关系的。

# 和list比较，dict有以下几个特点：
#
# 查找和插入的速度极快，不会随着key的增加而变慢；
# 需要占用大量的内存，内存浪费多。
# 而list相反：
#
# 查找和插入的时间随着元素的增加而增加；
# 占用空间小，浪费内存很少。

# 所以，dict是用空间来换取时间的一种方法。


# dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是dict的key必须是不可变对象。

# 这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这个通过key计算位置的算法称为哈希算法（Hash）。

# 要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key：
key = [1, 2, 3]
# d[key] = 'a list' # TypeError: unhashable type: 'list'

###=================================================================================================================

###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO: set
# set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。
s = set([1, 2, 3])

# 重复元素会被自动过滤
s = set([1, 1, 2, 2, 3, 3]) # {1, 2, 3}

# add 添加元素,add(key)方法可以添加元素到set中，可以重复添加，但不会有效果：
s.add(4) # {1, 2, 3, 4}

# 删除元素
s.remove(4) # {1, 2, 3}

# 数学运算
# set可以看成数学意义上的无序和无重复元素的集合
s1 = set([1, 2, 3])
s2 = set([2, 3, 4])
print( s1&s2 ) # 求交集 {2, 3}

print( s1 | s2 ) # 求并集 {1, 2, 3, 4}
# set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。试试把list放入set，看看是否会报错。
###=================================================================================================================


###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO: 再议不可变对象
a = ['c', 'b', 'a']
a.sort() # 列表内的内容是可变的 ['a', 'b', 'c']

# 字符串常量是不可变对象, 而 a 是变量
a = 'abc'
a = a.replace('a', 'A') # Abc
###=================================================================================================================
