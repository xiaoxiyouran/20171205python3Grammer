
# Unicode：2 字节统一编码（乱码消失了）

# utf-8：如果文档全是用英文写的，用Unicode2字节不划算，可变长，把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：
# UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。

# 内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码（我们看到的）。


#最新的Python 3版本中，字符串是以Unicode编码的
print('包含中文的str')

###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO: 获取单个字符的整数表示和把整数转成对应的字符
print(ord('A')) # 65
print(chr(65))  # A

print(ord('中')) # 20013

print('\u4e2d\u6587') # 知道整数编码用十六进制表示
# 中文
###=================================================================================================================

###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO: 在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes
x = b'ABC' # 每个字符占用一个字节

# 将字符串编码为指定的bytes
byte_s1 = 'ABC'.encode('ascii') # b'ABC'

# 在bytes中，无法显示为ASCII字符的字节，用\x##显示。
byte_s2 = '中文'.encode('utf-8') # 中文郑编码为utf-8 格式，b'\xe4\xb8\xad\xe6\x96\x87'

print(byte_s2)
###=================================================================================================================

###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO: 反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str
str_s1 = b'ABC'.decode('ascii')
str_s2 = b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')
print(str_s2)

# 如果bytes中包含无法解码的字节，decode()方法会报错
#print(b'\xe4\xb8\xad\xff'.decode('utf-8'))

# 如果bytes中只有一小部分无效的字节，可以传入errors='ignore'忽略错误的字节：
print(b'\xe4\xb8\xad\xff'.decode('utf-8', errors='ignore'))
###=================================================================================================================

###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO: str() 计算字符串包含多少个字符
len_str = len('ABC') # 3
len_zhong = len('中文') # 2

# 如果换成bytes 就是计算字节数
len_bytes = len(b'ABC') # 3
len_bytes2 = len(b'\xe4\xb8\xad\xe6\x96\x87') # 6
len_bytes3 = len('中文'.encode('utf-8'))      # 6

# 为了避免乱码问题，应当始终坚持使用UTF-8编码对str和bytes进行转换
# 由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：
###=================================================================================================================


###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO: 格式化输出
print( 'Hello, %s' % 'world' )

print( 'Hi, %s, you have $%d.' % ('Michael', 1000000) )

print( '浮点数 %f' % 1 )
print( '十六进制整数 %x' % 0xA )

# 不确定什么类型,%s 永远起作用
print( 'Age: %s. Gender: %s' % (25, True) )

# % 是一个普通字符，转义
print(  'growth rate: %d %%' % 7 )

# 用format 格式化输出
print( 'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125) )

###=================================================================================================================

