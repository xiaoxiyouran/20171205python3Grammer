
###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO: 函数重载
class Animal(object):
    def run(self):
        print('Animal is running...')


class Dog(Animal):
    def run(self): # 覆盖父类方法
        print('Dog is running...')
class Cat(Animal):
    def run(self):
        print('Cat is running...')

a = list()  # a是list类型
b = Animal()  # b是Animal类型
c = Dog()  # c是Dog类型

print( isinstance(c,Animal) ) # True
print( isinstance(b,Dog) )    # False 反过来是不行的


###=================================================================================================================
###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO: 对象传入函数
def run_twice(animal):
    animal.run()

run_twice(Dog())
run_twice(Cat())

class Tortoise(Animal):
    def run(self):
        print('Tortoise is running slowly...')

# 新增一个对象,run_twice 函数不用做任何更改
run_twice(Tortoise())

# 当我们需要传入Dog、Cat、Tortoise……时，我们只需要接收Animal类型就可以了
# 父类是为了统一函数接口

# Animal类型有run()方法，因此，传入的任意类型，只要是Animal类或者子类，就会自动调用实际类型的run()方法，这就是多态的意思：
# 具体调用的run()方法是作用在Animal、Dog、Cat还是Tortoise对象上
# 运行时该对象的确切类型决定，这就是多态真正的威力：调用方只管调用，不管细节，而当我们新增一种Animal的子类时，只要确保run()方法编写正确，不用管原来的代码是如何调用的。这就是著名的“开闭”原则：


###=================================================================================================================
###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO: 只要像鸭子就可以了,类 类对象

class Timer(object):
    def run(self):
        print('Timer Start...')

run_twice(Timer())



        ###=================================================================================================================
###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO:

###=================================================================================================================
###-----------------------------------------------------------------------------------------------------------------  class(begin)
### TODO:

###=================================================================================================================